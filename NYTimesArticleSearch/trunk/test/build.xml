<project name="tests" default="usage" basedir=".">
<!-- ==================== File and Directory Names ======================== -->
<!--
  These properties generally define file and directory names (or paths) that
  affect where the build process stores its outputs.
-->
  <property name="osid2.name"      value="okiOSID-2.0a" />
  <property name="build.home"      value="../build"/>
  <property name="build.class"     value="${build.home}/classes" />
  <property name="lib.home"        value="../lib" />
  <property name="lib.test"        value="${basedir}/lib" />
  <property name="extlib.home"     value="${basedir}/extlib" />

<!--  ==================== Compilation Control Options ==================== -->
<!--
  These properties control option settings on the Javac compiler when it
  is invoked using the <javac> task.

  compile.debug        Should compilation include the debug option?
  compile.deprecation  Should compilation include the deprecation option?
  compile.optimize     Should compilation include the optimize option?
-->
  <property name="compile.debug"       value="true"/>
  <property name="compile.deprecation" value="true"/>
  <property name="compile.optimize"    value="false" /> 

<!-- ==================== Compilation Classpath =========================== -->
<!--
  Rather than relying on the CLASSPATH environment variable, Ant includes
  features that makes it easy to dynamically construct the classpath you
  need for each compilation.
-->
  <path id="compile.classpath">
    <pathelement location="${basedir}" />
    <pathelement location="${lib.home}" />	
    <pathelement location="${build.class}"/>
    <pathelement location="${lib.home}/${osid2.name}.jar" />	
    <pathelement location="${lib.home}/OSIDIdNoPersist-1.0.jar" />
    <pathelement location="${lib.home}/OSIDLoggingPlain-1.0.jar" />
    <pathelement location="${lib.home}/json.jar" />	
        <pathelement location="${lib.home}/commons-codec-1.3.jar" />	
        <pathelement location="${lib.home}/commons-logging.jar" />	
        <pathelement location="${lib.home}/commons-httpclient-3.1.jar" />	
    
    <pathelement location="${extlib.home}/junit.jar"/>
    <pathelement location="${extlib.home}/OSIDTest-1.0.jar"/>
  </path>

<!-- ==================== All Target ====================================== -->
<!--
  The "all" target is a shortcut for running the "clean" target followed 
  by the "compile" target, to force a complete recompile.
-->
	<target name="usage" description="default target: show available targets">
		<echo message="These targets are supported:" />
		<echo message="  clean    deletes generated files" />
		<echo message="  compile  compiles sources" />
		<echo message="  all      perform clean, compile" />
	</target>

<!-- ==================== All Target ====================================== -->
<!--
  The "all" target is a shortcut for running the "clean" target followed by the 
  "compile" target, to force a complete recompile.
-->
  <target name="all" depends="clean, compile"
    description="Clean build and dist, then compile"/>


<!-- ==================== Clean Target ==================================== -->
<!--
  The "clean" target deletes any previous "build" and "dist" directory,
  so that you can be ensured the application can be built from scratch.
-->

  <target name="clean" depends="prepare">
    <delete dir="./build" />
  </target>


<!-- ==================== Prepare Target ================================== -->
<!--
  The "prepare" target is used to create the "build" destination directory,
  and copy the static contents of your web application to it.  If you need
  to copy static files from external dependencies, you can customize the
  contents of this task.

  Normally, this task is executed indirectly when needed.
-->

  <target name="prepare">

    <!-- Determine if Java 1.4 is available on this machine -->
    <condition property="java1.4.present"> 
      <equals arg1="${ant.java.version}" arg2="1.4" /> 
    </condition>
    
    <!-- Set Ant batch file based on test for platform -->
    <condition property="ant.exec" value="ant.bat"> 
      <os family="windows"/>
    </condition>
    <condition property="ant.exec" value="ant"> 
      <not>
        <os family="windows"/>
      </not>
    </condition>
    
    <tstamp />
  </target>

<!-- ==================== Compile Target(s) ================================== -->
<!--
  The "compile" target transforms source files (from your "src" directory)
  into object files in the appropriate location in the build directory.
-->

  <target name="compile" depends="prepare"
    description="Compile Java sources">
    <mkdir dir="${build.class}"/>

    <javac srcdir="${basedir}" destdir="${build.class}"
        debug="${compile.debug}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}"
    >
      <classpath refid="compile.classpath"/>
      <include name="*.java"/>
    </javac>
  </target>

	<!--- =============  Test  =========-->
	<target name="test" depends="compile" description="Test minimally">
	<echo message="Bootcamp Simple Search Test"/>
	<java classname="junit.textui.TestRunner" failonerror="true" fork="true">
		<arg value="edu.tufts.osidimpl.testing.repository.OsidTester"/>
		<classpath refid="compile.classpath"/>
		<sysproperty key="testProfile" value="nytimes-simpleSearchProfile.xml"/>
	</java>
	</target>

</project>


